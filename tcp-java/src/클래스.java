public class 클래스 {
    public static void main(String[] args) {
        /*
        객체 지향 프로그래밍
        모든 데이터를 객체로 취급하며 이러한 객체가 바로 프로그래밍의 중심
        객체 - 사물
        상태와 행동을 구체화 하는 형태의 프로그래밍 바로 객지향 프로그래밍
        객체 만들기 -> 클래스(설계도)
        필드 - 클래스에 포함된 변수
        메소드 - 어떠한 특정작업을 수행하기 위한 명령문의 집합이라 할수 있다
        인스턴스 - 클래스 사용 -> 해당 클래스 객체 선언
        클래스 객체 선언과정 -> 클래스 인스턴스화
        해당클래스 타입의 객체를 인스턴스라고 한다
        하나의 클래스 -> 여러개의 인스턴스 생성 -> 생성된 인스턴스 -> 독립된 메모리 공간에 저장된 자신만의 필드
        클래스의 모든 메소드 해당 클래스에서 생성된 모든 인스턴스가 공우
        클래스 예
        class 차 : 설계도
        필드
        car.modelName = '람보르기니'
        car.modelYear = 2016
        메소드
        car.accelerate()
        인스턴스
        내차 myCar : 설계도 의해 생성된 차량
        자동차 인스턴스 모두 위와 같은 필드와 메소드 갖게된다
        각 인스턴스마다 가지고 있는 프로퍼티의 값은 전부 다르다
        메소드
        클래스 맴버
        필트와 기능을 표현한느 메소드 가집니다
        메소드 - 어떠한 특정작업을 수행하기 위한 명령문 집합
        접근제어자 반환타입 메소드 이름(메개변수목록) { //선언부
          //구현분
         }
         접근제어자 - 해당메소드 접근할수 있는 번위
         반환 타입 - 메소드가 모든 작업을 마치고 반환하는 데이터 타입 명시
         메소드 이름 - 메소드를 호출하기 위한 이름을 명시합니다
         매개변수 목록 - 메소드 호출시 전달되는 인수의 값을 저장할 변수등을 명시합니다
         구현부 = 메소드의 고유 기능 수행하는 명령문의 집합
         하나의 클래스 같은 이름의 메소드를 정의할수 없다
         메소드 오버로딩 -> 같은 이름의 메소드 중복하여 정의
         클래스의 구성요소
         멤버 속성표현하는 필드 기능 메소드
         클래스는 생성딘 객체의 필드 초기화 -> 메소드인 생성자
         */
        /*class Car { //클래스 이름
            private int modelYear; //필드

            Car(string modelName, int modelYear) {
                //생성자
                this.modelName = modelName;
                this.modelYear = modelYear;
            }

            public String getModel() {
                //메소드
                return this.modelYear + "년식" + this.modelName + " " + this.color;
            }
        }
        /*
        클래스의 선언
        객체 지향 프로그래밍의 추상화라는 개념을 직접 구현한것이다
        자바에서는 개발자의 편의를 유용하게 사용할수 있는 수의 클래스를 미리정의하여 제공하고 있다
        개발자 원하는 동작을 하는 새로운 클래스를 손쇱게 작성할수도 있습니다
        자바에서 클래스 선언하는 방법은 접근 제어자와 함께 class키워드 사용
        접근제어자 class 클래스 이름 {
         접근제이자 필드1타입 필드1이름
         접근체어자 필드2타입 필드2이름
         접근제어자 메소드1의 원형
         접근제이저 메소드2의 원형
         public(접근제어자) class(키워드) Car(클래스이름) {
            private String modelName; (클래스 필드)
            public void brake() {} (클래스 메소드)
            ....
         }
         (클래스 맴버)
        }
        접근제어자는 객체 지향 프로그래밍 특징 -> 정보 은닉
        public멤버는 모든 객체에서 접근할수 있지만 private맴버는 해당 객체내의 맴버변수나 메소드만 접근할수 있다
        인스턴스의 생성
        클래스의 정의를 갖고 다음 순서대로 Car 객체의 인스턴스를 생성한다
        우선 다음과 같이 객체를 참조하기 위한 참조변수 먼저 선언
        클래스이름 객체팜조변수이름;
        Car myCar;
        그 후에 new키워드 사용하여 인스턴스를 생성하고 해당 인스턴스의 주소를 미리선언한 참조변수에 저장하여 사용합니다
        객체 잠조 변수이름 = new 클래스 이름()
        myCar = new Car();
        클래스이름 객체참조변수이름 = new 클래스이름();
        Car myCar = new Car();
        메소드
        클래스는 맵버로 속성을 표현하는 필드와 기능을 표현하는 메소드입니다
        메소드 작성 이유 -> 중복되는 코드를 반복적인 프로그래밍을 피할수 있기 때문입니다
        모듈화 -> 가독성 좋아짐
        프로그램 문제 기능의 변경 필요 -> 손쉽게 유지보수
        메소드 정의
        일반함수 정의하는 방법
        접근제어자 반환타입 메소드 이름(매개변수 목록) { //선언부
         //구현부
        }
        접근 제어자 - 해당 메소드에 접근할수 있는 범위를 명시합니다
        반환 타입 - 메소드가 모든 작업을 마치고 반환하는 데이터의 타입을 명시합니다
        메소드 이름 - 메소드를 호출하기 위한 이름 명시
        매개변수 목록 - 메소드 호출시 전달되는 인수의 값을 저장할 변수들을 명시한다
        구현부 - 메소드의 고유기능을 수행하는 명령문의 집합
         */
        //다음예제는 Car클래스의 accelerate()메소드 정의하는 예제
        class Cars {
            private int currentSpped;
            private int acclerationTime;
            public void accelerate(int speed, int second) {
                System.out.println(second + "초간 속도를 시속" + speed + "으로 가속함");
            }
            //이메소드는 public접근 제어자를 사용하여 선언하여 해당 객체를 사용하는 프로그램 어디서아나 접근할수 있다
            //반환타입에 어떤값도 반환하지 않는다는 의미 -> void명시합니다
            //메소드의 이름을 명시하고 매개변수로 int형 변수인 speed와 second를 전달 받는다
            //전달받는 매개변수를 가지고 매소드 구현부에서 고유한 작업을 수행할수 있을 것입니다
            //메소드 호출
            //맴버참조 연산자(.)를 사용하여 호출할수 있다
            //객체 참조 변수이름.메소드이름(); //메게변수가 없는 매소드 호출
            //객체 참조 벼수리음.메소드이름(인수1, 인수2, ...); //메게뱐스기 있는 매소드 호출
        }
        Cars myCar1 = new Cars(); //객체를 생성함
        myCar1.accelerate(60, 3); //mtCar 인스턴스의 accelerate()메소드를 호출함
        //다음 예제는 실제로 accelerate1()메소드를 정의하고 호출하는 예제입니다
        /*class Car2 {
            private int currentspeed;
            private int accelerationTime;

            public void accelerate1(int speed, int second) {
                System.out.println(second + "초간속도를 시속" + speed + "으로 가속함");
            }
        }
        public class Method1 {
            public static void main(String[] args) {
                Car2 myCar2 = new Car2(); //객체 생성
                myCar2.accelerate1(60,3);
            }
        }*/
    }

}
